
/*
  This file is auto-generated by generate-icon-components.js. Do not edit it manually.
*/
import { html, css, LitElement } from "lit";
import { customElement, property } from "lit/decorators.js";

export const FhiIconPhoneSelector = "fhi-icon-phone";

/**
 * ## FhiIconPhone
 * 
 * {@link https://designsystem.fhi.no/?path=/docs/ikoner--docs}
 * 
 * @tag fhi-icon-phone
 * @element fhi-icon-phone
 */
@customElement(FhiIconPhoneSelector)
export class FhiIconPhone extends LitElement {

  /**
   * Sets the color for the icon
   * @attr
   * @type {string}
   */ 
  @property({ type: String }) color: string = "currentcolor";

  /**
   * Sets the size of the icon. Predefined options `xsmall`, `small`, `medium`, `large`. Also accepts `number` or `rem` and `px` values. Default `medium`.
   * @attr
   * @type { 'xsmall' | 'small' | 'medium' | 'large' | number | string}
   * @default "medium"
   */
  @property({ type: String }) size: 'xsmall' | 'small' | 'medium' | 'large' | number | `${number}px` | `${number}rem` = 'medium';

  /**@internal */
  private get _size(): string {
    switch (this.size) {
      case 'xsmall': 
        return '1rem'; 
      case 'small':
        return '1.25rem';
      case 'medium':
        return '1.5rem'; 
      case 'large':
        return '2rem'; 
      default:
        if (String(this.size).endsWith('px') || String(this.size).endsWith('rem')) {
          return String(this.size);
        }
        if (isNaN(Number(this.size))) {
          console.warn(`Invalid size value: ${this.size}. Falling back to default size '1.5rem'.`)
          return '1.5rem';
        }
        return `${this.size}px`;
    }
  }

  render() {
    return html`
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="${this._size}" height="${this._size}" fill="${this.color}"><path d="M7.11 1.251a2.75 2.75 0 0 1 2.696 2.12l.047.244v.007c.119.904.34 1.79.659 2.645l.062.185a2.75 2.75 0 0 1-.681 2.715l-.003.004-.858.856a15.25 15.25 0 0 0 4.94 4.94l.86-.86a2.75 2.75 0 0 1 2.899-.62c.748.28 1.521.483 2.308.61l.34.05h.005a2.75 2.75 0 0 1 2.365 2.773v2.997a2.75 2.75 0 0 1-.89 2.038 2.75 2.75 0 0 1-2.107.712l-.014-.001a20.54 20.54 0 0 1-8.95-3.183l-.467-.305a20.25 20.25 0 0 1-5.761-5.921A20.54 20.54 0 0 1 1.374 4.26l-.002-.012A2.755 2.755 0 0 1 3 1.484a2.75 2.75 0 0 1 1.11-.234zM3.98 2.757a1.253 1.253 0 0 0-1.115 1.35 19 19 0 0 0 2.657 7.86l.297.475.003.006a18.75 18.75 0 0 0 5.338 5.487l.432.282.006.004a19.04 19.04 0 0 0 8.288 2.952 1.26 1.26 0 0 0 .959-.323 1.25 1.25 0 0 0 .404-.927V16.92l.001-.019a1.25 1.25 0 0 0-1.075-1.268v-.001a13.6 13.6 0 0 1-2.968-.74h-.002a1.25 1.25 0 0 0-1.318.282L14.62 16.44a.75.75 0 0 1-.901.122 16.75 16.75 0 0 1-6.281-6.28.75.75 0 0 1 .122-.902l1.27-1.27a1.25 1.25 0 0 0 .278-1.316l-.001-.002a13.6 13.6 0 0 1-.74-2.967l-.021-.111a1.25 1.25 0 0 0-1.229-.964H4.11z"/></svg>
    `;
  }
      
  static styles = css`
    :host {
      display: flex;
      max-height: min-content;
      max-width: min-content;
    }
  `;
  }
